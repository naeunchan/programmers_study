#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <utility>
#include <map>

using namespace std;

string change(string& str, map<string, string>& m)
{
    string result = "";
    
    for(int i = 0; i < str.size(); i += 2)
    {
        string tmp = str.substr(i, 2);
        
        if(tmp[1] == '#')
            tmp = m.find(tmp) -> second;
        else
        {
            tmp = tmp[0];
            i--;
        }
        result += tmp;
    }
    return result;
}
string solution(string m, vector<string> musicinfos) {
    string answer = "";
    map<string, string> music;
    pair<string, int> ans = make_pair("(None)", 0);
        
    music.insert(make_pair("C#", "Q"));
    music.insert(make_pair("D#", "W"));
    music.insert(make_pair("F#", "R"));
    music.insert(make_pair("G#", "T"));
    music.insert(make_pair("A#", "Z"));
    m = change(m, music);
    
    for(int i = 0; i < musicinfos.size(); i++)
    {
        string temp = "", title = "";
        int count = 0, hour = 0, minute = 0;
        stringstream ss(musicinfos[i]);
        pair<string, int> tmp;
        
        while(getline(ss, temp, ','))
        {
            if(count == 0)
            {
                hour = atoi(temp.substr(0, 2).c_str());
                minute = atoi(temp.substr(3, 2).c_str());
            }
            else if(count == 1)
            {
                hour = atoi(temp.substr(0, 2).c_str()) - hour;
                minute = abs(atoi(temp.substr(3, 2).c_str()) - minute);
                minute = hour * 60 + minute;
            }
            else if(count == 2)
                title = temp;
            else
            {
                temp = change(temp, music);
                int k = temp.size();
                // cout << temp << endl;
                for(int o = 0; o < (int)(minute / k); o++)
                    temp += temp;
                for(int o = 0; o < (int)(minute % k); o++)
                    temp += temp[o];
            }
            count++;
        }
        if(temp.find(m) != string::npos)
        {
            tmp.first = title;
            tmp.second = temp.size();
            
            if(ans.second < tmp.second)
                ans = tmp;
        }
    }
    return ans.first;
}